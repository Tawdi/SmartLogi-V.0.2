\d
\c
create database  qq;
\q
\c mydb
\q
\c
\q
\q
\q
\?
\q
\q
\q
\¢ acteon
\c acteon
\d "ClientType"
\d "ClientTypes"
\d
INSERT INTO "ClientTypes" ("Id", "Label", "CreatedAt")
VALUES
  (gen_random_uuid(), 'Particulier', NOW()),
  (gen_random_uuid(), 'Entreprise', NOW()),
  (gen_random_uuid(), 'Association', NOW()),
  (gen_random_uuid(), 'Administration publique', NOW()),
  (gen_random_uuid(), 'Profession libérale', NOW()),
  (gen_random_uuid(), 'Auto-entrepreneur', NOW()),
  (gen_random_uuid(), 'Organisation non gouvernementale', NOW()),
  (gen_random_uuid(), 'Institution financière', NOW());
\q
\c acteon
select * from "Invoices"
;
select * from "Invoices";
select * from "InvoiceItems";
\dt
\@
\q
\c acteon
\d "Clients"
select * from  "Clients"
;
q
exit
\q
\c subtrack 
select * from  "abonnements"
;
select * from  "abonnement";
q
\q
\c subtrack 
alter table paiement set column id String PRIMARY KEY 
\d 
\t
\t
 \d paiemant
 \d paiement
ALTER TABLE paiement 
    ALTER COLUMN id SET DATA TYPE text;
ALTER TABLE paiement 
    ALTER COLUMN id SET DATA TYPE text;
ALTER TABLE paiement 
    ALTER COLUMN id SET DATA TYPE text;
 \d paiemant
 \d paiemaet
 \d paiement
\q
Create Database barakaguard
;
\c barakaguard 

-- Table Client
CREATE TABLE IF NOT EXISTS Client (
    id UUID PRIMARY KEY,
    nom VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL
);

-- Table Compte
CREATE TABLE IF NOT EXISTS Compte (
    id UUID PRIMARY KEY,
    numero VARCHAR(20) UNIQUE NOT NULL,
    solde NUMERIC(15,2) DEFAULT 0,
    idClient UUID NOT NULL,
    typeCompte VARCHAR(20) NOT NULL CHECK (typeCompte IN ('courant', 'epargne')),
    decouvertAutorise NUMERIC(15,2),
    tauxInteret NUMERIC(5,2),
    CONSTRAINT fk_client FOREIGN KEY (idClient)
    REFERENCES Client(id) ON DELETE CASCADE
);

-- Table Transaction
CREATE TABLE IF NOT EXISTS Transaction (
    id UUID PRIMARY KEY,
    date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    montant NUMERIC(15,2) NOT NULL,
    type VARCHAR(20) NOT NULL CHECK (type IN ('VERSEMENT', 'RETRAIT', 'VIREMENT')),
    lieu VARCHAR(100),
    idCompte UUID NOT NULL,
    CONSTRAINT fk_compte FOREIGN KEY (idCompte)
    REFERENCES Compte(id) ON DELETE CASCADE
);

-- Index utiles
CREATE INDEX IF NOT EXISTS idx_transaction_idCompte ON Transaction(idCompte);
CREATE INDEX IF NOT EXISTS idx_compte_idClient ON Compte(idClient);
\q
\c barakaguard 
drop tables ;
drop table 
;
drop table transaction ;
-- Table Transaction
CREATE TABLE IF NOT EXISTS Transactions (
    id UUID PRIMARY KEY,
    date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    montant NUMERIC(15,2) NOT NULL,
    type VARCHAR(20) NOT NULL CHECK (type IN ('VERSEMENT', 'RETRAIT', 'VIREMENT')),
    lieu VARCHAR(100),
    idCompte UUID NOT NULL,
    CONSTRAINT fk_compte FOREIGN KEY (idCompte)
    REFERENCES Compte(id) ON DELETE CASCADE
);

-- Index utiles
CREATE INDEX IF NOT EXISTS idx_transaction_idCompte ON Transactions(idCompte);
\q
\c barakaguard 
select * from clients ;
select * from client ;
\c
\q
CREATE DATABASE hospital_db;
\q
\dd
\d
show databases
;
show databases;
 databases;
 databases
;
\d d
\dt
\da
\db
\dm
\dq
\?
\l
\q
\q
Create DATABASE diagnolink ;
\q
\c diagnolink 
delete from nurses ;
delete from users;
\c postgres 
drop database diagnolink 
;
drop database diagnolink 
;
drop database diagnolink 
;
create database diagnolink;
\q
drop database diagnolink 
;
drop database diagnolink 
;
create database diagnolink;
\q
DROP DATABASE diagnolink;
CREATE DATABASE diagnolink;
\q
DROP DATABASE diagnolink;
CREATE DATABASE diagnolink;
\q
\c diagnolink 
-- Insérer les spécialités médicales dans la table specialties
INSERT INTO specialties (id, name, description) VALUES
    (gen_random_uuid(), 'Cardiologie', 'Maladies du cœur et des vaisseaux sanguins (hypertension, insuffisance cardiaque, arythmie, infarctus)'),
    (gen_random_uuid(), 'Pneumologie', 'Maladies respiratoires et pulmonaires'),
    (gen_random_uuid(), 'Neurologie', 'Troubles du système nerveux'),
    (gen_random_uuid(), 'Gastro-entérologie', 'Maladies du système digestif'),
    (gen_random_uuid(), 'Endocrinologie', 'Troubles hormonaux et métaboliques (diabète, problèmes thyroïdiens, obésité)'),
    (gen_random_uuid(), 'Dermatologie', 'Maladies de la peau'),
    (gen_random_uuid(), 'Rhumatologie', 'Maladies des articulations, os et muscles'),
    (gen_random_uuid(), 'Psychiatrie', 'Troubles mentaux et psychologiques (dépression, anxiété, addictions)'),
    (gen_random_uuid(), 'Néphrologie', 'Maladies des reins (insuffisance rénale, infections urinaires complexes)'),
    (gen_random_uuid(), 'Orthopédie', 'Traumatismes et pathologies des os, articulations et muscles');

-- Vérifier les insertions
SELECT * FROM specialties;
-- Insérer les spécialités médicales dans la table specialties avec created_at
INSERT INTO specialties (id, name, description, created_at) VALUES
    (gen_random_uuid(), 'Cardiologie', 'Maladies du cœur et des vaisseaux sanguins (hypertension, insuffisance cardiaque, arythmie, infarctus)', CURRENT_TIMESTAMP),
    (gen_random_uuid(), 'Pneumologie', 'Maladies respiratoires et pulmonaires', CURRENT_TIMESTAMP),
    (gen_random_uuid(), 'Neurologie', 'Troubles du système nerveux', CURRENT_TIMESTAMP),
    (gen_random_uuid(), 'Gastro-entérologie', 'Maladies du système digestif', CURRENT_TIMESTAMP),
    (gen_random_uuid(), 'Endocrinologie', 'Troubles hormonaux et métaboliques (diabète, problèmes thyroïdiens, obésité)', CURRENT_TIMESTAMP),
    (gen_random_uuid(), 'Dermatologie', 'Maladies de la peau', CURRENT_TIMESTAMP),
    (gen_random_uuid(), 'Rhumatologie', 'Maladies des articulations, os et muscles', CURRENT_TIMESTAMP),
    (gen_random_uuid(), 'Psychiatrie', 'Troubles mentaux et psychologiques (dépression, anxiété, addictions)', CURRENT_TIMESTAMP),
    (gen_random_uuid(), 'Néphrologie', 'Maladies des reins (insuffisance rénale, infections urinaires complexes)', CURRENT_TIMESTAMP),
    (gen_random_uuid(), 'Orthopédie', 'Traumatismes et pathologies des os, articulations et muscles', CURRENT_TIMESTAMP);

-- Vérifier les insertions
SELECT * FROM specialties;
select * from users;
select * from users;
select * from users;
\q
\c diagnolink 
select * from creneau;
select c.day , c.specialist_id from creneau c;
select c.start_time ,  c.day , c.specialist_id from creneau c;
select c.start_time ,  c.day , c.specialist_id from creneau c;
select c.start_time ,  c.day , c.specialist_id from creneau c order by  c.day c.start_time;
select c.start_time ,  c.day , c.specialist_id from creneau c order by  c.day c.start_time;
select c.start_time ,  c.day , c.specialist_id from creneau c order by  c.day ;
delete from creneau limit 10 ;
select * from creneau limit 10 ;
delete from creneau when id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
select c.start_time ,  c.day , c.specialist_id from creneau c order by  c.day ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
delete from creneau where id in (select id from creneau limit 10) ;
select c.start_time ,  c.day , c.specialist_id from creneau c order by  c.day ;
\q
\c diagnolink 
\d t
\dt
select count(id) from creneau  group by id
;
select * from creneau ;
select * from creneau ;
\q
CREATE DATABASE smartlogi;
\q
\c smartlogi 
\q
\q
\c smartlogi 
\dt
\q
\c smartlogi 
drop table colis ;
drop table livreur ;
\q
\c smartlogi 
\dt 
\dt livreur 
\d livreur 
\q
CREATE DATABASE smartlogi_dms ;
\q
\c smartlogi_dms 
\c senders
\d senders
\dt
\d databasechangelog
\l databasechangelog
\l databasechangeloglock
\l senders
\dl senders
\dt senders
select * from senders 
;
select * from databasechangelog ;
select * from databasechangelog ;
\q
q
\q
\c smartlogi_dms 
\c postgres 
drop database smartlogi_dms ;
create database smartlogi_dms ;
\q
\q
\q
\t
\d
\d senders 
\dl senders 
\dt senders 
\s senders 
\d senders 
\s senders 
